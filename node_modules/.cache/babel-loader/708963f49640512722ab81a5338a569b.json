{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"changeReason\", \"unstable_updateValueOnRender\"],\n  _excluded2 = [\"align\", \"children\", \"colIndex\", \"column\", \"cellMode\", \"field\", \"formattedValue\", \"hasFocus\", \"height\", \"isEditable\", \"isSelected\", \"rowId\", \"tabIndex\", \"value\", \"width\", \"className\", \"showRightBorder\", \"extendRowFullWidth\", \"row\", \"colSpan\", \"disableDragEvents\", \"onClick\", \"onDoubleClick\", \"onMouseDown\", \"onMouseUp\", \"onMouseOver\", \"onKeyDown\", \"onKeyUp\", \"onDragEnter\", \"onDragOver\"],\n  _excluded3 = [\"column\", \"rowId\", \"editCellState\", \"align\", \"children\", \"colIndex\", \"height\", \"width\", \"className\", \"showRightBorder\", \"extendRowFullWidth\", \"row\", \"colSpan\", \"disableDragEvents\", \"onClick\", \"onDoubleClick\", \"onMouseDown\", \"onMouseUp\", \"onMouseOver\", \"onKeyDown\", \"onKeyUp\", \"onDragEnter\", \"onDragOver\"],\n  _excluded4 = [\"changeReason\", \"unstable_updateValueOnRender\"];\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef, unstable_composeClasses as composeClasses, unstable_ownerDocument as ownerDocument, unstable_capitalize as capitalize } from '@mui/utils';\nimport { fastMemo } from '../../utils/fastMemo';\nimport { doesSupportPreventScroll } from '../../utils/doesSupportPreventScroll';\nimport { getDataGridUtilityClass, gridClasses } from '../../constants/gridClasses';\nimport { GridCellModes } from '../../models';\nimport { useGridSelector, objectShallowCompare } from '../../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridFocusCellSelector } from '../../hooks/features/focus/gridFocusStateSelector';\nimport { MissingRowIdError } from '../../hooks/features/rows/useGridParamsApi';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar EMPTY_CELL_PARAMS = {\n  id: -1,\n  field: '__unset__',\n  row: {},\n  rowNode: {\n    id: -1,\n    depth: 0,\n    type: 'leaf',\n    parent: -1,\n    groupingKey: null\n  },\n  colDef: {\n    type: 'string',\n    field: '__unset__',\n    computedWidth: 0\n  },\n  cellMode: GridCellModes.View,\n  hasFocus: false,\n  tabIndex: -1,\n  value: null,\n  formattedValue: '__unset__',\n  isEditable: false,\n  api: {}\n};\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var align = ownerState.align,\n    showRightBorder = ownerState.showRightBorder,\n    isEditable = ownerState.isEditable,\n    isSelected = ownerState.isSelected,\n    classes = ownerState.classes;\n  var slots = {\n    root: ['cell', \"cell--text\".concat(capitalize(align)), isEditable && 'cell--editable', isSelected && 'selected', showRightBorder && 'cell--withRightBorder', 'withBorderColor'],\n    content: ['cellContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nvar warnedOnce = false;\n\n// GridCellWrapper is a compatibility layer for the V6 cell slot. If we can use the more efficient\n// `GridCellV7`, we should. That component is a merge of `GridCellWrapper` and `GridCell`.\n// TODO(v7): Remove the wrapper & cellV6 and use the cellV7 exclusively.\n// TODO(v7): Removing the wrapper will break the docs performance visualization demo.\nvar GridCellWrapper = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var column = props.column,\n    rowId = props.rowId,\n    editCellState = props.editCellState;\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var field = column.field;\n  var cellParamsWithAPI = useGridSelector(apiRef, function () {\n    // This is required because `.getCellParams` tries to get the `state.rows.tree` entry\n    // associated with `rowId`/`fieldId`, but this selector runs after the state has been\n    // updated, while `rowId`/`fieldId` reference an entry in the old state.\n    try {\n      var cellParams = apiRef.current.getCellParams(rowId, field);\n      var result = cellParams;\n      result.api = apiRef.current;\n      return result;\n    } catch (e) {\n      if (e instanceof MissingRowIdError) {\n        return EMPTY_CELL_PARAMS;\n      }\n      throw e;\n    }\n  }, objectShallowCompare);\n  var isSelected = useGridSelector(apiRef, function () {\n    return apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n      id: rowId,\n      field: field\n    });\n  });\n  if (cellParamsWithAPI === EMPTY_CELL_PARAMS) {\n    return null;\n  }\n  var cellMode = cellParamsWithAPI.cellMode,\n    hasFocus = cellParamsWithAPI.hasFocus,\n    isEditable = cellParamsWithAPI.isEditable,\n    value = cellParamsWithAPI.value,\n    formattedValue = cellParamsWithAPI.formattedValue;\n  var managesOwnFocus = column.type === 'actions';\n  var tabIndex = (cellMode === 'view' || !isEditable) && !managesOwnFocus ? cellParamsWithAPI.tabIndex : -1;\n  var rootClasses = rootProps.classes,\n    getCellClassName = rootProps.getCellClassName;\n  var classNames = apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n    id: rowId,\n    field: field\n  });\n  if (column.cellClassName) {\n    classNames.push(typeof column.cellClassName === 'function' ? column.cellClassName(cellParamsWithAPI) : column.cellClassName);\n  }\n  if (getCellClassName) {\n    classNames.push(getCellClassName(cellParamsWithAPI));\n  }\n  var children;\n  if (editCellState == null && column.renderCell) {\n    children = column.renderCell(cellParamsWithAPI);\n    classNames.push(gridClasses['cell--withRenderer']);\n    classNames.push(rootClasses == null ? void 0 : rootClasses['cell--withRenderer']);\n  }\n  if (editCellState != null && column.renderEditCell) {\n    var updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    var editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded);\n    var params = _extends({}, cellParamsWithAPI, {\n      row: updatedRow\n    }, editCellStateRest);\n    children = column.renderEditCell(params);\n    classNames.push(gridClasses['cell--editing']);\n    classNames.push(rootClasses == null ? void 0 : rootClasses['cell--editing']);\n  }\n  var slots = rootProps.slots;\n  var CellComponent = slots.cell;\n  var cellProps = _extends({}, props, {\n    ref: ref,\n    field: field,\n    formattedValue: formattedValue,\n    hasFocus: hasFocus,\n    isEditable: isEditable,\n    isSelected: isSelected,\n    value: value,\n    cellMode: cellMode,\n    children: children,\n    tabIndex: tabIndex,\n    className: clsx(classNames)\n  });\n  return /*#__PURE__*/React.createElement(CellComponent, cellProps);\n});\nvar GridCell = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _rootProps$experiment;\n  var align = props.align,\n    childrenProp = props.children,\n    colIndex = props.colIndex,\n    column = props.column,\n    cellMode = props.cellMode,\n    field = props.field,\n    formattedValue = props.formattedValue,\n    hasFocus = props.hasFocus,\n    height = props.height,\n    isEditable = props.isEditable,\n    isSelected = props.isSelected,\n    rowId = props.rowId,\n    tabIndex = props.tabIndex,\n    value = props.value,\n    width = props.width,\n    className = props.className,\n    showRightBorder = props.showRightBorder,\n    colSpan = props.colSpan,\n    disableDragEvents = props.disableDragEvents,\n    onClick = props.onClick,\n    onDoubleClick = props.onDoubleClick,\n    onMouseDown = props.onMouseDown,\n    onMouseUp = props.onMouseUp,\n    onMouseOver = props.onMouseOver,\n    onKeyDown = props.onKeyDown,\n    onKeyUp = props.onKeyUp,\n    onDragEnter = props.onDragEnter,\n    onDragOver = props.onDragOver,\n    other = _objectWithoutPropertiesLoose(props, _excluded2);\n  var valueToRender = formattedValue == null ? value : formattedValue;\n  var cellRef = React.useRef(null);\n  var handleRef = useForkRef(ref, cellRef);\n  var focusElementRef = React.useRef(null);\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var ownerState = {\n    align: align,\n    showRightBorder: showRightBorder,\n    isEditable: isEditable,\n    classes: rootProps.classes,\n    isSelected: isSelected\n  };\n  var classes = useUtilityClasses(ownerState);\n  var publishMouseUp = React.useCallback(function (eventName) {\n    return function (event) {\n      var params = apiRef.current.getCellParams(rowId, field || '');\n      apiRef.current.publishEvent(eventName, params, event);\n      if (onMouseUp) {\n        onMouseUp(event);\n      }\n    };\n  }, [apiRef, field, onMouseUp, rowId]);\n  var publishMouseDown = React.useCallback(function (eventName) {\n    return function (event) {\n      var params = apiRef.current.getCellParams(rowId, field || '');\n      apiRef.current.publishEvent(eventName, params, event);\n      if (onMouseDown) {\n        onMouseDown(event);\n      }\n    };\n  }, [apiRef, field, onMouseDown, rowId]);\n  var publish = React.useCallback(function (eventName, propHandler) {\n    return function (event) {\n      // The row might have been deleted during the click\n      if (!apiRef.current.getRow(rowId)) {\n        return;\n      }\n      var params = apiRef.current.getCellParams(rowId, field || '');\n      apiRef.current.publishEvent(eventName, params, event);\n      if (propHandler) {\n        propHandler(event);\n      }\n    };\n  }, [apiRef, field, rowId]);\n  var style = {\n    minWidth: width,\n    maxWidth: width,\n    minHeight: height,\n    maxHeight: height === 'auto' ? 'none' : height // max-height doesn't support \"auto\"\n  };\n\n  React.useEffect(function () {\n    if (!hasFocus || cellMode === GridCellModes.Edit) {\n      return;\n    }\n    var doc = ownerDocument(apiRef.current.rootElementRef.current);\n    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {\n      var focusableElement = cellRef.current.querySelector('[tabindex=\"0\"]');\n      var elementToFocus = focusElementRef.current || focusableElement || cellRef.current;\n      if (doesSupportPreventScroll()) {\n        elementToFocus.focus({\n          preventScroll: true\n        });\n      } else {\n        var scrollPosition = apiRef.current.getScrollPosition();\n        elementToFocus.focus();\n        apiRef.current.scroll(scrollPosition);\n      }\n    }\n  }, [hasFocus, cellMode, apiRef]);\n  var handleFocus = other.onFocus;\n  if (process.env.NODE_ENV === 'test' && (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.warnIfFocusStateIsNotSynced) {\n    handleFocus = function handleFocus(event) {\n      var focusedCell = gridFocusCellSelector(apiRef);\n      if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {\n        if (typeof other.onFocus === 'function') {\n          other.onFocus(event);\n        }\n        return;\n      }\n      if (!warnedOnce) {\n        console.warn([\"MUI: The cell with id=\".concat(rowId, \" and field=\").concat(field, \" received focus.\"), \"According to the state, the focus should be at id=\".concat(focusedCell == null ? void 0 : focusedCell.id, \", field=\").concat(focusedCell == null ? void 0 : focusedCell.field, \".\"), \"Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.\", 'Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state.'].join('\\n'));\n        warnedOnce = true;\n      }\n    };\n  }\n  var managesOwnFocus = column.type === 'actions';\n  var children = childrenProp;\n  if (children === undefined) {\n    var valueString = valueToRender == null ? void 0 : valueToRender.toString();\n    children = /*#__PURE__*/_jsx(\"div\", {\n      className: classes.content,\n      title: valueString,\n      children: valueString\n    });\n  }\n  if ( /*#__PURE__*/React.isValidElement(children) && managesOwnFocus) {\n    children = /*#__PURE__*/React.cloneElement(children, {\n      focusElementRef: focusElementRef\n    });\n  }\n  var draggableEventHandlers = disableDragEvents ? null : {\n    onDragEnter: publish('cellDragEnter', onDragEnter),\n    onDragOver: publish('cellDragOver', onDragOver)\n  };\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: handleRef,\n    className: clsx(className, classes.root),\n    role: \"cell\",\n    \"data-field\": field,\n    \"data-colindex\": colIndex,\n    \"aria-colindex\": colIndex + 1,\n    \"aria-colspan\": colSpan,\n    style: style,\n    tabIndex: tabIndex,\n    onClick: publish('cellClick', onClick),\n    onDoubleClick: publish('cellDoubleClick', onDoubleClick),\n    onMouseOver: publish('cellMouseOver', onMouseOver),\n    onMouseDown: publishMouseDown('cellMouseDown'),\n    onMouseUp: publishMouseUp('cellMouseUp'),\n    onKeyDown: publish('cellKeyDown', onKeyDown),\n    onKeyUp: publish('cellKeyUp', onKeyUp)\n  }, draggableEventHandlers, other, {\n    onFocus: handleFocus,\n    children: children\n  }));\n});\nvar MemoizedCellWrapper = fastMemo(GridCellWrapper);\nprocess.env.NODE_ENV !== \"production\" ? GridCellWrapper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  align: PropTypes.oneOf(['center', 'left', 'right']),\n  className: PropTypes.string,\n  colIndex: PropTypes.number,\n  colSpan: PropTypes.number,\n  column: PropTypes.object,\n  disableDragEvents: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  showRightBorder: PropTypes.bool,\n  width: PropTypes.number\n} : void 0;\nprocess.env.NODE_ENV !== \"production\" ? GridCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  align: PropTypes.oneOf(['center', 'left', 'right']),\n  cellMode: PropTypes.oneOf(['edit', 'view']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  colIndex: PropTypes.number,\n  colSpan: PropTypes.number,\n  column: PropTypes.object,\n  disableDragEvents: PropTypes.bool,\n  editCellState: PropTypes.shape({\n    changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n    isProcessingProps: PropTypes.bool,\n    isValidating: PropTypes.bool,\n    value: PropTypes.any\n  }),\n  height: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]),\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  showRightBorder: PropTypes.bool,\n  width: PropTypes.number\n} : void 0;\nexport { MemoizedCellWrapper as GridCellWrapper, GridCell };\nvar GridCellV7 = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _rootProps$experiment2;\n  var column = props.column,\n    rowId = props.rowId,\n    editCellState = props.editCellState,\n    align = props.align,\n    colIndex = props.colIndex,\n    height = props.height,\n    width = props.width,\n    className = props.className,\n    showRightBorder = props.showRightBorder,\n    colSpan = props.colSpan,\n    disableDragEvents = props.disableDragEvents,\n    onClick = props.onClick,\n    onDoubleClick = props.onDoubleClick,\n    onMouseDown = props.onMouseDown,\n    onMouseUp = props.onMouseUp,\n    onMouseOver = props.onMouseOver,\n    onKeyDown = props.onKeyDown,\n    onKeyUp = props.onKeyUp,\n    onDragEnter = props.onDragEnter,\n    onDragOver = props.onDragOver,\n    other = _objectWithoutPropertiesLoose(props, _excluded3);\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var field = column.field;\n  var cellParamsWithAPI = useGridSelector(apiRef, function () {\n    // This is required because `.getCellParams` tries to get the `state.rows.tree` entry\n    // associated with `rowId`/`fieldId`, but this selector runs after the state has been\n    // updated, while `rowId`/`fieldId` reference an entry in the old state.\n    try {\n      var cellParams = apiRef.current.getCellParams(rowId, field);\n      var result = cellParams;\n      result.api = apiRef.current;\n      return result;\n    } catch (e) {\n      if (e instanceof MissingRowIdError) {\n        return EMPTY_CELL_PARAMS;\n      }\n      throw e;\n    }\n  }, objectShallowCompare);\n  var isSelected = useGridSelector(apiRef, function () {\n    return apiRef.current.unstable_applyPipeProcessors('isCellSelected', false, {\n      id: rowId,\n      field: field\n    });\n  });\n  var cellMode = cellParamsWithAPI.cellMode,\n    hasFocus = cellParamsWithAPI.hasFocus,\n    isEditable = cellParamsWithAPI.isEditable,\n    value = cellParamsWithAPI.value,\n    formattedValue = cellParamsWithAPI.formattedValue;\n  var managesOwnFocus = column.type === 'actions';\n  var tabIndex = (cellMode === 'view' || !isEditable) && !managesOwnFocus ? cellParamsWithAPI.tabIndex : -1;\n  var rootClasses = rootProps.classes,\n    getCellClassName = rootProps.getCellClassName;\n  var classNames = apiRef.current.unstable_applyPipeProcessors('cellClassName', [], {\n    id: rowId,\n    field: field\n  });\n  if (column.cellClassName) {\n    classNames.push(typeof column.cellClassName === 'function' ? column.cellClassName(cellParamsWithAPI) : column.cellClassName);\n  }\n  if (getCellClassName) {\n    classNames.push(getCellClassName(cellParamsWithAPI));\n  }\n  var valueToRender = formattedValue == null ? value : formattedValue;\n  var cellRef = React.useRef(null);\n  var handleRef = useForkRef(ref, cellRef);\n  var focusElementRef = React.useRef(null);\n  var ownerState = {\n    align: align,\n    showRightBorder: showRightBorder,\n    isEditable: isEditable,\n    classes: rootProps.classes,\n    isSelected: isSelected\n  };\n  var classes = useUtilityClasses(ownerState);\n  var publishMouseUp = React.useCallback(function (eventName) {\n    return function (event) {\n      var params = apiRef.current.getCellParams(rowId, field || '');\n      apiRef.current.publishEvent(eventName, params, event);\n      if (onMouseUp) {\n        onMouseUp(event);\n      }\n    };\n  }, [apiRef, field, onMouseUp, rowId]);\n  var publishMouseDown = React.useCallback(function (eventName) {\n    return function (event) {\n      var params = apiRef.current.getCellParams(rowId, field || '');\n      apiRef.current.publishEvent(eventName, params, event);\n      if (onMouseDown) {\n        onMouseDown(event);\n      }\n    };\n  }, [apiRef, field, onMouseDown, rowId]);\n  var publish = React.useCallback(function (eventName, propHandler) {\n    return function (event) {\n      // The row might have been deleted during the click\n      if (!apiRef.current.getRow(rowId)) {\n        return;\n      }\n      var params = apiRef.current.getCellParams(rowId, field || '');\n      apiRef.current.publishEvent(eventName, params, event);\n      if (propHandler) {\n        propHandler(event);\n      }\n    };\n  }, [apiRef, field, rowId]);\n  var style = {\n    minWidth: width,\n    maxWidth: width,\n    minHeight: height,\n    maxHeight: height === 'auto' ? 'none' : height // max-height doesn't support \"auto\"\n  };\n\n  React.useEffect(function () {\n    if (!hasFocus || cellMode === GridCellModes.Edit) {\n      return;\n    }\n    var doc = ownerDocument(apiRef.current.rootElementRef.current);\n    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {\n      var focusableElement = cellRef.current.querySelector('[tabindex=\"0\"]');\n      var elementToFocus = focusElementRef.current || focusableElement || cellRef.current;\n      if (doesSupportPreventScroll()) {\n        elementToFocus.focus({\n          preventScroll: true\n        });\n      } else {\n        var scrollPosition = apiRef.current.getScrollPosition();\n        elementToFocus.focus();\n        apiRef.current.scroll(scrollPosition);\n      }\n    }\n  }, [hasFocus, cellMode, apiRef]);\n  if (cellParamsWithAPI === EMPTY_CELL_PARAMS) {\n    return null;\n  }\n  var handleFocus = other.onFocus;\n  if (process.env.NODE_ENV === 'test' && (_rootProps$experiment2 = rootProps.experimentalFeatures) != null && _rootProps$experiment2.warnIfFocusStateIsNotSynced) {\n    handleFocus = function handleFocus(event) {\n      var focusedCell = gridFocusCellSelector(apiRef);\n      if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {\n        if (typeof other.onFocus === 'function') {\n          other.onFocus(event);\n        }\n        return;\n      }\n      if (!warnedOnce) {\n        console.warn([\"MUI: The cell with id=\".concat(rowId, \" and field=\").concat(field, \" received focus.\"), \"According to the state, the focus should be at id=\".concat(focusedCell == null ? void 0 : focusedCell.id, \", field=\").concat(focusedCell == null ? void 0 : focusedCell.field, \".\"), \"Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.\", 'Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state.'].join('\\n'));\n        warnedOnce = true;\n      }\n    };\n  }\n  var children;\n  if (editCellState == null && column.renderCell) {\n    children = column.renderCell(cellParamsWithAPI);\n    classNames.push(gridClasses['cell--withRenderer']);\n    classNames.push(rootClasses == null ? void 0 : rootClasses['cell--withRenderer']);\n  }\n  if (editCellState != null && column.renderEditCell) {\n    var updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column.field);\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    var editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded4);\n    var params = _extends({}, cellParamsWithAPI, {\n      row: updatedRow\n    }, editCellStateRest);\n    children = column.renderEditCell(params);\n    classNames.push(gridClasses['cell--editing']);\n    classNames.push(rootClasses == null ? void 0 : rootClasses['cell--editing']);\n  }\n  if (children === undefined) {\n    var valueString = valueToRender == null ? void 0 : valueToRender.toString();\n    children = /*#__PURE__*/_jsx(\"div\", {\n      className: classes.content,\n      title: valueString,\n      children: valueString\n    });\n  }\n  if ( /*#__PURE__*/React.isValidElement(children) && managesOwnFocus) {\n    children = /*#__PURE__*/React.cloneElement(children, {\n      focusElementRef: focusElementRef\n    });\n  }\n  var draggableEventHandlers = disableDragEvents ? null : {\n    onDragEnter: publish('cellDragEnter', onDragEnter),\n    onDragOver: publish('cellDragOver', onDragOver)\n  };\n  return /*#__PURE__*/_jsx(\"div\", _extends({\n    ref: handleRef,\n    className: clsx(className, classNames, classes.root),\n    role: \"cell\",\n    \"data-field\": field,\n    \"data-colindex\": colIndex,\n    \"aria-colindex\": colIndex + 1,\n    \"aria-colspan\": colSpan,\n    style: style,\n    tabIndex: tabIndex,\n    onClick: publish('cellClick', onClick),\n    onDoubleClick: publish('cellDoubleClick', onDoubleClick),\n    onMouseOver: publish('cellMouseOver', onMouseOver),\n    onMouseDown: publishMouseDown('cellMouseDown'),\n    onMouseUp: publishMouseUp('cellMouseUp'),\n    onKeyDown: publish('cellKeyDown', onKeyDown),\n    onKeyUp: publish('cellKeyUp', onKeyUp)\n  }, draggableEventHandlers, other, {\n    onFocus: handleFocus,\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellV7.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  align: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n  className: PropTypes.string,\n  colIndex: PropTypes.number.isRequired,\n  colSpan: PropTypes.number,\n  column: PropTypes.object.isRequired,\n  disableDragEvents: PropTypes.bool,\n  editCellState: PropTypes.shape({\n    changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n    isProcessingProps: PropTypes.bool,\n    isValidating: PropTypes.bool,\n    value: PropTypes.any\n  }),\n  height: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  showRightBorder: PropTypes.bool,\n  width: PropTypes.number.isRequired\n} : void 0;\nvar MemoizedGridCellV7 = fastMemo(GridCellV7);\nexport { MemoizedGridCellV7 as GridCellV7 };","map":null,"metadata":{},"sourceType":"module"}