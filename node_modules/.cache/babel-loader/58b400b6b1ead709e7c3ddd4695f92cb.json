{"ast":null,"code":"import { createSelector, createSelectorMemoized } from '../../../utils/createSelector';\nimport { gridFilteredTopLevelRowCountSelector, gridExpandedSortedRowEntriesSelector, gridExpandedSortedRowIdsSelector, gridFilteredSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nimport { getPageCount } from './gridPaginationUtils';\n\n/**\n * @category Pagination\n * @ignore - do not document.\n */\nexport var gridPaginationSelector = function gridPaginationSelector(state) {\n  return state.pagination;\n};\n\n/**\n * Get the pagination model\n * @category Pagination\n */\nexport var gridPaginationModelSelector = createSelector(gridPaginationSelector, function (pagination) {\n  return pagination.paginationModel;\n});\n\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\nexport var gridPageSelector = createSelector(gridPaginationModelSelector, function (paginationModel) {\n  return paginationModel.page;\n});\n\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\nexport var gridPageSizeSelector = createSelector(gridPaginationModelSelector, function (paginationModel) {\n  return paginationModel.pageSize;\n});\n\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\nexport var gridPageCountSelector = createSelector(gridPaginationModelSelector, gridFilteredTopLevelRowCountSelector, function (paginationModel, visibleTopLevelRowCount) {\n  return getPageCount(visibleTopLevelRowCount, paginationModel.pageSize);\n});\n\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport var gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, function (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) {\n  var visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  var topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);\n  var topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);\n\n  // The range contains no element\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  }\n\n  // The tree is flat, there is no need to look for children\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n  var topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  var topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  var firstRowIndex = visibleSortedRowEntries.findIndex(function (row) {\n    return row.id === topLevelFirstRow.id;\n  });\n  var lastRowIndex = firstRowIndex;\n  var topLevelRowAdded = 0;\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    var row = visibleSortedRowEntries[lastRowIndex];\n    var depth = rowTree[row.id].depth;\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n  return {\n    firstRowIndex: firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport var gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, function (visibleSortedRowEntries, paginationRange) {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport var gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, function (visibleSortedRowIds, paginationRange) {\n  if (!paginationRange) {\n    return [];\n  }\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});","map":null,"metadata":{},"sourceType":"module"}