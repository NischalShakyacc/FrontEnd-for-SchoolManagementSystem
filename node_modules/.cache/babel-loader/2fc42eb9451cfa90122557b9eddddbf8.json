{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { gridSortedRowEntriesSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n\n/**\n * @category Filtering\n */\nvar gridFilterStateSelector = function gridFilterStateSelector(state) {\n  return state.filter;\n};\n\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport var gridFilterModelSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filterModel;\n});\n\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport var gridQuickFilterValuesSelector = createSelector(gridFilterModelSelector, function (filterModel) {\n  return filterModel.quickFilterValues;\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridVisibleRowsLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.visibleRowsLookup;\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filteredRowsLookup;\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilteredDescendantCountLookupSelector = createSelector(gridFilterStateSelector, function (filterState) {\n  return filterState.filteredDescendantCountLookup;\n});\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport var gridExpandedSortedRowEntriesSelector = createSelector(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, function (visibleRowsLookup, sortedRows) {\n  return sortedRows.filter(function (row) {\n    return visibleRowsLookup[row.id] !== false;\n  });\n});\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport var gridExpandedSortedRowIdsSelector = createSelector(gridExpandedSortedRowEntriesSelector, function (visibleSortedRowEntries) {\n  return visibleSortedRowEntries.map(function (row) {\n    return row.id;\n  });\n});\n\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport var gridFilteredSortedRowEntriesSelector = createSelector(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, function (filteredRowsLookup, sortedRows) {\n  return sortedRows.filter(function (row) {\n    return filteredRowsLookup[row.id] !== false;\n  });\n});\n\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport var gridFilteredSortedRowIdsSelector = createSelector(gridFilteredSortedRowEntriesSelector, function (filteredSortedRowEntries) {\n  return filteredSortedRowEntries.map(function (row) {\n    return row.id;\n  });\n});\n\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport var gridFilteredSortedTopLevelRowEntriesSelector = createSelector(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, function (visibleSortedRows, rowTree, rowTreeDepth) {\n  if (rowTreeDepth < 2) {\n    return visibleSortedRows;\n  }\n  return visibleSortedRows.filter(function (row) {\n    var _rowTree$row$id;\n    return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;\n  });\n});\n\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport var gridExpandedRowCountSelector = createSelector(gridExpandedSortedRowEntriesSelector, function (visibleSortedRows) {\n  return visibleSortedRows.length;\n});\n\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport var gridFilteredTopLevelRowCountSelector = createSelector(gridFilteredSortedTopLevelRowEntriesSelector, function (visibleSortedTopLevelRows) {\n  return visibleSortedTopLevelRows.length;\n});\n\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilterActiveItemsSelector = createSelector(gridFilterModelSelector, gridColumnLookupSelector, function (filterModel, columnLookup) {\n  var _filterModel$items;\n  return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter(function (item) {\n    var _column$filterOperato, _item$value;\n    if (!item.field) {\n      return false;\n    }\n    var column = columnLookup[item.field];\n    if (!(column != null && column.filterOperators) || (column == null ? void 0 : (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {\n      return false;\n    }\n    var filterOperator = column.filterOperators.find(function (operator) {\n      return operator.value === item.operator;\n    });\n    if (!filterOperator) {\n      return false;\n    }\n    return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== '';\n  });\n});\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport var gridFilterActiveItemsLookupSelector = createSelector(gridFilterActiveItemsSelector, function (activeFilters) {\n  var result = activeFilters.reduce(function (res, filterItem) {\n    if (!res[filterItem.field]) {\n      res[filterItem.field] = [filterItem];\n    } else {\n      res[filterItem.field].push(filterItem);\n    }\n    return res;\n  }, {});\n  return result;\n});","map":null,"metadata":{},"sourceType":"module"}