{"ast":null,"code":"import _slicedToArray from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\School Web Application\\\\FrontEnd\\\\src\\\\Routes\\\\Admin\\\\GroupAccount.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { DataGrid } from '@mui/x-data-grid';\nexport default function GroupAccount() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    accounts = _useState2[0],\n    setAccounts = _useState2[1];\n  var readExcel = function readExcel(file) {\n    var promise = new Promise(function (resolve, reject) {\n      var fileReader = new FileReader(file);\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = function (e) {\n        var bufferArray = e.target.result;\n        var wb = XLSX.read(bufferArray, {\n          type: 'buffer'\n        });\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n        var data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n      fileReader.onerror = function (error) {\n        reject(error);\n      };\n    });\n    promise.then(function (data) {\n      setAccounts(data);\n      console.log(data);\n\n      // For columns\n\n      data;\n      data.map(function (value, index) {\n        console.log(value);\n      });\n      var columns = [{\n        field: 'id',\n        headerName: 'ID',\n        width: 50\n      }, {\n        field: 'name',\n        headerName: 'Full Name',\n        width: 150\n      }, {\n        field: 'gender',\n        headerName: 'Gender',\n        width: 100\n      }, {\n        field: 'phone',\n        headerName: 'Phone',\n        description: 'The students phone number is here.',\n        width: 160,\n        sortable: false\n      }, {\n        field: 'address',\n        headerName: 'Address',\n        description: 'The students address is here.',\n        width: 160\n      }, {\n        field: 'fathername',\n        headerName: \"Father's Name\",\n        description: \" Father's name is here.\",\n        width: 160\n      }];\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"innerHero\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formPart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: function onChange(e) {\n      var file = e.target.files[0];\n      readExcel(file);\n    },\n    accept: \".xlsx, .xls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataPart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"names":["React","useState","XLSX","DataGrid","GroupAccount","_useState","_useState2","_slicedToArray","accounts","setAccounts","readExcel","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","console","log","map","value","index","columns","field","headerName","width","description","sortable","createElement","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","files","accept"],"sources":["E:/School Web Application/FrontEnd/src/Routes/Admin/GroupAccount.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nexport default function GroupAccount() {\r\n    const [accounts, setAccounts] = useState([])\r\n\r\n    const readExcel = (file)=>{\r\n        \r\n        const promise = new Promise((resolve, reject)=>{\r\n            const fileReader = new FileReader(file);\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload = (e)=>{\r\n                const bufferArray = e.target.result;\r\n\r\n                const wb = XLSX.read(bufferArray,{type:'buffer'});\r\n\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                const data = XLSX.utils.sheet_to_json(ws);\r\n                resolve(data);\r\n            };\r\n            fileReader.onerror = ((error)=>{\r\n                reject(error);\r\n            })\r\n        })\r\n\r\n        promise.then((data)=>{\r\n            setAccounts(data);\r\n            console.log(data);\r\n            \r\n            // For columns\r\n\r\n            data\r\n            data.map((value,index)=>{\r\n                console.log(value)\r\n            })\r\n            const columns = [\r\n            \r\n            { field: 'id', headerName: 'ID', width: 50 },\r\n\r\n            { field: 'name', headerName: 'Full Name', width: 150,},\r\n            {\r\n                field: 'gender',\r\n                headerName: 'Gender',\r\n                width: 100,\r\n            },\r\n            {\r\n                field: 'phone',\r\n                headerName: 'Phone',\r\n                description: 'The students phone number is here.',\r\n                width: 160,\r\n                sortable:false\r\n            },\r\n            {\r\n                field: 'address',\r\n                headerName: 'Address',\r\n                description: 'The students address is here.',\r\n                width: 160,\r\n            },\r\n            {\r\n                field: 'fathername',\r\n                headerName: \"Father's Name\",\r\n                description: \" Father's name is here.\",\r\n                width: 160,\r\n            }\r\n            ];\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id='innerHero'>\r\n        <div className='formPart'>\r\n            <input \r\n            type=\"file\" \r\n            onChange={(e)=>{\r\n                const file = e.target.files[0];\r\n                readExcel(file);\r\n            }}\r\n            accept='.xlsx, .xls'\r\n            />\r\n        </div>\r\n        <div className='dataPart'>\r\n        \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}