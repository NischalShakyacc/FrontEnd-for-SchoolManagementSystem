{"ast":null,"code":"import _slicedToArray from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useLazyRef } from './useLazyRef';\nimport { useOnMount } from './useOnMount';\nimport { buildWarning } from '../../utils/warning';\nimport { fastObjectShallowCompare } from '../../utils/fastObjectShallowCompare';\nvar stateNotInitializedWarning = buildWarning(['MUI: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);\nfunction isOutputSelector(selector) {\n  return selector.acceptsApiRef;\n}\nfunction applySelector(apiRef, selector) {\n  if (isOutputSelector(selector)) {\n    return selector(apiRef);\n  }\n  return selector(apiRef.current.state);\n}\nvar defaultCompare = Object.is;\nexport var objectShallowCompare = fastObjectShallowCompare;\nvar createRefs = function createRefs() {\n  return {\n    state: null,\n    equals: null,\n    selector: null\n  };\n};\nexport var useGridSelector = function useGridSelector(apiRef, selector) {\n  var equals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCompare;\n  if (process.env.NODE_ENV !== 'production') {\n    if (!apiRef.current.state) {\n      stateNotInitializedWarning();\n    }\n  }\n  var refs = useLazyRef(createRefs);\n  var didInit = refs.current.selector !== null;\n  var _React$useState = React.useState(\n    // We don't use an initialization function to avoid allocations\n    didInit ? null : applySelector(apiRef, selector)),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  refs.current.state = state;\n  refs.current.equals = equals;\n  refs.current.selector = selector;\n  useOnMount(function () {\n    return apiRef.current.store.subscribe(function () {\n      var newState = applySelector(apiRef, refs.current.selector);\n      if (!refs.current.equals(refs.current.state, newState)) {\n        refs.current.state = newState;\n        setState(newState);\n      }\n    });\n  });\n  return state;\n};","map":null,"metadata":{},"sourceType":"module"}