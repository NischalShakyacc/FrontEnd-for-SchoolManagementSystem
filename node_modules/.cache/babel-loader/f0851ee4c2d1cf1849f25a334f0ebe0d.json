{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport var COMPACT_DENSITY_FACTOR = 0.7;\nexport var COMFORTABLE_DENSITY_FACTOR = 1.3;\nvar DENSITY_FACTORS = {\n  compact: COMPACT_DENSITY_FACTOR,\n  comfortable: COMFORTABLE_DENSITY_FACTOR,\n  standard: 1\n};\nexport var densityStateInitializer = function densityStateInitializer(state, props) {\n  return _extends({}, state, {\n    density: {\n      value: props.density,\n      factor: DENSITY_FACTORS[props.density]\n    }\n  });\n};\nexport var useGridDensity = function useGridDensity(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useDensity');\n  var setDensity = React.useCallback(function (newDensity) {\n    logger.debug(\"Set grid density to \".concat(newDensity));\n    apiRef.current.setState(function (state) {\n      var currentDensityState = gridDensitySelector(state);\n      var newDensityState = {\n        value: newDensity,\n        factor: DENSITY_FACTORS[newDensity]\n      };\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n  React.useEffect(function () {\n    apiRef.current.setDensity(props.density);\n  }, [apiRef, props.density]);\n  var densityApi = {\n    setDensity: setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n};","map":null,"metadata":{},"sourceType":"module"}