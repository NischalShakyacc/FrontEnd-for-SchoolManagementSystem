{"ast":null,"code":"import _toConsumableArray from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector, gridColumnGroupsUnwrappedModelSelector } from './gridColumnGroupsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { getColumnGroupsHeaderStructure, unwrapGroupingColumnModel } from './gridColumnGroupsUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridColumnFieldsSelector,\n// GridColumnsState,\ngridVisibleColumnFieldsSelector } from '../columns';\nimport { useGridSelector } from '../../utils/useGridSelector';\nvar createGroupLookup = function createGroupLookup(columnGroupingModel) {\n  var groupLookup = {};\n  columnGroupingModel.forEach(function (node) {\n    if (isLeaf(node)) {\n      return;\n    }\n    var groupId = node.groupId,\n      children = node.children,\n      other = _objectWithoutPropertiesLoose(node, _excluded);\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n    if (!children) {\n      console.warn(\"MUI: group groupId=\".concat(groupId, \" has no children.\"));\n    }\n    var groupParam = _extends({}, other, {\n      groupId: groupId\n    });\n    var subTreeLookup = createGroupLookup(children);\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(\"MUI: The groupId \".concat(groupId, \" is used multiple times in the columnGroupingModel.\"));\n    }\n    groupLookup = _extends({}, groupLookup, subTreeLookup, _defineProperty({}, groupId, groupParam));\n  });\n  return _extends({}, groupLookup);\n};\nexport var columnGroupsStateInitializer = function columnGroupsStateInitializer(state, props, apiRef) {\n  var _props$experimentalFe, _props$columnGrouping, _props$columnGrouping2;\n  if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n    return state;\n  }\n  var columnFields = gridColumnFieldsSelector(apiRef);\n  var visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n  var groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  var unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n  var columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);\n  var maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max.apply(Math, _toConsumableArray(visibleColumnFields.map(function (field) {\n    var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n    return (_unwrappedGroupingMod = (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod2.length) != null ? _unwrappedGroupingMod : 0;\n  })));\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      unwrappedGroupingModel: unwrappedGroupingModel,\n      headerStructure: columnGroupsHeaderStructure,\n      maxDepth: maxDepth\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport var useGridColumnGrouping = function useGridColumnGrouping(apiRef, props) {\n  var _props$experimentalFe3;\n  /**\n   * API METHODS\n   */\n  var getColumnGroupPath = React.useCallback(function (field) {\n    var _unwrappedGroupingMod3;\n    var unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);\n    return (_unwrappedGroupingMod3 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod3 : [];\n  }, [apiRef]);\n  var getAllGroupDetails = React.useCallback(function () {\n    var columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  var columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'public');\n  var handleColumnIndexChange = React.useCallback(function () {\n    var _props$columnGrouping3;\n    var unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping3 = props.columnGroupingModel) != null ? _props$columnGrouping3 : []);\n    apiRef.current.setState(function (state) {\n      var _state$columns$ordere, _state$columns;\n      var orderedFields = (_state$columns$ordere = (_state$columns = state.columns) == null ? void 0 : _state$columns.orderedFields) != null ? _state$columns$ordere : [];\n      var columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel);\n      return _extends({}, state, {\n        columnGrouping: _extends({}, state.columnGrouping, {\n          headerStructure: columnGroupsHeaderStructure\n        })\n      });\n    });\n  }, [apiRef, props.columnGroupingModel]);\n  useGridApiEventHandler(apiRef, 'columnIndexChange', handleColumnIndexChange);\n  var columnFields = useGridSelector(apiRef, gridColumnFieldsSelector);\n  var visibleColumnFields = useGridSelector(apiRef, gridVisibleColumnFieldsSelector);\n  /**\n   * EFFECTS\n   */\n  React.useEffect(function () {\n    var _props$experimentalFe2, _props$columnGrouping4, _props$columnGrouping5;\n    if (!((_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.columnGrouping)) {\n      return;\n    }\n    var groupLookup = createGroupLookup((_props$columnGrouping4 = props.columnGroupingModel) != null ? _props$columnGrouping4 : []);\n    var unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping5 = props.columnGroupingModel) != null ? _props$columnGrouping5 : []);\n    var columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);\n    var maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max.apply(Math, _toConsumableArray(visibleColumnFields.map(function (field) {\n      var _unwrappedGroupingMod4, _unwrappedGroupingMod5;\n      return (_unwrappedGroupingMod4 = (_unwrappedGroupingMod5 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod5.length) != null ? _unwrappedGroupingMod4 : 0;\n    })));\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        columnGrouping: {\n          lookup: groupLookup,\n          unwrappedGroupingModel: unwrappedGroupingModel,\n          headerStructure: columnGroupsHeaderStructure,\n          maxDepth: maxDepth\n        }\n      });\n    });\n  }, [apiRef, columnFields, visibleColumnFields, props.columnGroupingModel, (_props$experimentalFe3 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe3.columnGrouping]);\n};","map":null,"metadata":{},"sourceType":"module"}