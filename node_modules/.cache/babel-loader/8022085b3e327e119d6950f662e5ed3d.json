{"ast":null,"code":"import _objectSpread from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\School Web Application\\\\FrontEnd\\\\src\\\\Routes\\\\Admin\\\\GroupAccount.js\";\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useNavigate } from 'react-router-dom';\nexport default function GroupAccount() {\n  var _this = this;\n  var navigate = useNavigate();\n  useEffect(function () {\n    if (!localStorage.getItem('token')) {\n      navigate('/login');\n    }\n  }, []);\n  var createAccount = function createAccount(row) {\n    e.preventDefault();\n    console.log(\"This printing\");\n    console.log(row);\n  };\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    columns = _useState2[0],\n    setColumns = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    rows = _useState4[0],\n    setRows = _useState4[1];\n  var readExcel = function readExcel(file) {\n    var promise = new Promise(function (resolve, reject) {\n      var fileReader = new FileReader(file);\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = function (e) {\n        var bufferArray = e.target.result;\n        var wb = XLSX.read(bufferArray, {\n          type: 'buffer'\n        });\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n        var data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n      fileReader.onerror = function (error) {\n        reject(error);\n      };\n    });\n    promise.then(function (data) {\n      // For columns\n      var columnNames = Object.keys(data[0]);\n      var columns = [{\n        field: \"action\",\n        headerName: \"Action\",\n        sortable: false,\n        renderCell: function renderCell(_ref) {\n          var row = _ref.row;\n          return /*#__PURE__*/React.createElement(\"button\", {\n            onClick: function onClick() {\n              return createAccount(row);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }\n          }, \"Create Account\");\n        },\n        width: 150\n      }];\n      columnNames.forEach(function (value) {\n        columns.push({\n          field: value,\n          headerName: value,\n          width: 100,\n          sortable: false\n        });\n      });\n      setColumns(columns);\n      var rows = [];\n      data.forEach(function (value, index) {\n        rows.push(_objectSpread({\n          cerate: 'Create',\n          id: ++index\n        }, value));\n      });\n      setRows(rows);\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"innerHero\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formPart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: function onChange(e) {\n      var file = e.target.files[0];\n      readExcel(file);\n    },\n    accept: \".xlsx, .xls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataPart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: columns,\n    initialState: {\n      pagination: {\n        paginationModel: {\n          page: 0,\n          pageSize: 10\n        }\n      }\n    },\n    pageSizeOptions: [5, 10, 50],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"names":["React","useState","XLSX","DataGrid","useNavigate","GroupAccount","_this","navigate","useEffect","localStorage","getItem","createAccount","row","e","preventDefault","console","log","_useState","_useState2","_slicedToArray","columns","setColumns","_useState3","_useState4","rows","setRows","readExcel","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","columnNames","Object","keys","field","headerName","sortable","renderCell","_ref","createElement","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","forEach","value","push","index","_objectSpread","cerate","id","className","onChange","files","accept","initialState","pagination","paginationModel","page","pageSize","pageSizeOptions"],"sources":["E:/School Web Application/FrontEnd/src/Routes/Admin/GroupAccount.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function GroupAccount() {\r\n\r\n    const navigate = useNavigate()\r\n    useEffect(()=>{\r\n        if(!localStorage.getItem('token')){\r\n            navigate('/login');\r\n        }\r\n    },[])\r\n\r\n    const createAccount =(row)=>{\r\n        e.preventDefault();\r\n        console.log(\"This printing\");\r\n        console.log(row)\r\n    }\r\n    const [columns, setColumns] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    const readExcel = (file)=>{\r\n        \r\n        const promise = new Promise((resolve, reject)=>{\r\n            const fileReader = new FileReader(file);\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload = (e)=>{\r\n                const bufferArray = e.target.result;\r\n\r\n                const wb = XLSX.read(bufferArray,{type:'buffer'});\r\n\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                const data = XLSX.utils.sheet_to_json(ws);\r\n                resolve(data);\r\n            };\r\n            fileReader.onerror = ((error)=>{\r\n                reject(error);\r\n            })\r\n        })\r\n\r\n        promise.then((data)=>{\r\n            \r\n            // For columns\r\n            const columnNames = Object.keys(data[0])\r\n            let columns = [{\r\n                field: \"action\",\r\n                headerName: \"Action\",\r\n                sortable: false,\r\n                renderCell: ({ row }) =>\r\n                <button onClick={()=>{return createAccount(row)}}>Create Account</button>,\r\n                width: 150\r\n            }];\r\n            \r\n            columnNames.forEach((value) => {\r\n                columns.push({\r\n                    field: value, headerName: value, width: 100,\r\n                    sortable: false \r\n                })\r\n            });\r\n            setColumns(columns);\r\n\r\n            let rows = [];\r\n\r\n            data.forEach((value,index) => {\r\n                rows.push({\r\n                    cerate : 'Create',\r\n                    id: ++index,\r\n                    ...value\r\n                });\r\n            });\r\n            setRows(rows);\r\n            \r\n        })\r\n    }\r\n\r\n    return (\r\n        <div id='innerHero'>\r\n        <div className='formPart'>\r\n            <input \r\n            type=\"file\" \r\n            onChange={(e)=>{\r\n                const file = e.target.files[0];\r\n                readExcel(file);\r\n            }}\r\n            accept='.xlsx, .xls'\r\n            />\r\n        </div>\r\n        <div className='dataPart'>\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                initialState={{\r\n                pagination: {\r\n                    paginationModel: { page: 0, pageSize: 10 },\r\n                },\r\n                }}\r\n                pageSizeOptions={[5, 10, 50]}\r\n            />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAC5B,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAA,IAAAC,KAAA;EAEnC,IAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;EAC9BI,SAAS,CAAC,YAAI;IACV,IAAG,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAC;MAC9BH,QAAQ,CAAC,QAAQ,CAAC;IACtB;EACJ,CAAC,EAAC,EAAE,CAAC;EAEL,IAAMI,aAAa,GAAE,SAAfA,aAAaA,CAAGC,GAAG,EAAG;IACxBC,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;EACpB,CAAC;EAAA,IAAAK,SAAA,GAC6BhB,QAAQ,CAAC,EAAE,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACFrB,QAAQ,CAAC,EAAE,CAAC;IAAAsB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA7BE,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EAEpB,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAIC,IAAI,EAAG;IAEtB,IAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAG;MAC3C,IAAMC,UAAU,GAAG,IAAIC,UAAU,CAACN,IAAI,CAAC;MACvCK,UAAU,CAACE,iBAAiB,CAACP,IAAI,CAAC;MAElCK,UAAU,CAACG,MAAM,GAAG,UAACtB,CAAC,EAAG;QACrB,IAAMuB,WAAW,GAAGvB,CAAC,CAACwB,MAAM,CAACC,MAAM;QAEnC,IAAMC,EAAE,GAAGrC,IAAI,CAACsC,IAAI,CAACJ,WAAW,EAAC;UAACK,IAAI,EAAC;QAAQ,CAAC,CAAC;QAEjD,IAAMC,MAAM,GAAGH,EAAE,CAACI,UAAU,CAAC,CAAC,CAAC;QAC/B,IAAMC,EAAE,GAAGL,EAAE,CAACM,MAAM,CAACH,MAAM,CAAC;QAC5B,IAAMI,IAAI,GAAG5C,IAAI,CAAC6C,KAAK,CAACC,aAAa,CAACJ,EAAE,CAAC;QACzCd,OAAO,CAACgB,IAAI,CAAC;MACjB,CAAC;MACDd,UAAU,CAACiB,OAAO,GAAI,UAACC,KAAK,EAAG;QAC3BnB,MAAM,CAACmB,KAAK,CAAC;MACjB,CAAE;IACN,CAAC,CAAC;IAEFtB,OAAO,CAACuB,IAAI,CAAC,UAACL,IAAI,EAAG;MAEjB;MACA,IAAMM,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC;MACxC,IAAI1B,OAAO,GAAG,CAAC;QACXmC,KAAK,EAAE,QAAQ;QACfC,UAAU,EAAE,QAAQ;QACpBC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE,SAAAA,WAAAC,IAAA;UAAA,IAAG/C,GAAG,GAAA+C,IAAA,CAAH/C,GAAG;UAAA,oBAClBZ,KAAA,CAAA4D,aAAA;YAAQC,OAAO,EAAE,SAAAA,QAAA,EAAI;cAAC,OAAOlD,aAAa,CAACC,GAAG,CAAC;YAAA,CAAE;YAAAkD,MAAA,EAAAxD,KAAA;YAAAyD,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAA,GAAC,gBAAsB,CAAC;QAAA;QACzEC,KAAK,EAAE;MACX,CAAC,CAAC;MAEFhB,WAAW,CAACiB,OAAO,CAAC,UAACC,KAAK,EAAK;QAC3BlD,OAAO,CAACmD,IAAI,CAAC;UACThB,KAAK,EAAEe,KAAK;UAAEd,UAAU,EAAEc,KAAK;UAAEF,KAAK,EAAE,GAAG;UAC3CX,QAAQ,EAAE;QACd,CAAC,CAAC;MACN,CAAC,CAAC;MACFpC,UAAU,CAACD,OAAO,CAAC;MAEnB,IAAII,IAAI,GAAG,EAAE;MAEbsB,IAAI,CAACuB,OAAO,CAAC,UAACC,KAAK,EAACE,KAAK,EAAK;QAC1BhD,IAAI,CAAC+C,IAAI,CAAAE,aAAA;UACLC,MAAM,EAAG,QAAQ;UACjBC,EAAE,EAAE,EAAEH;QAAK,GACRF,KAAK,CACX,CAAC;MACN,CAAC,CAAC;MACF7C,OAAO,CAACD,IAAI,CAAC;IAEjB,CAAC,CAAC;EACN,CAAC;EAED,oBACIxB,KAAA,CAAA4D,aAAA;IAAKe,EAAE,EAAC,WAAW;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnBnE,KAAA,CAAA4D,aAAA;IAAKgB,SAAS,EAAC,UAAU;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACrBnE,KAAA,CAAA4D,aAAA;IACAnB,IAAI,EAAC,MAAM;IACXoC,QAAQ,EAAE,SAAAA,SAAChE,CAAC,EAAG;MACX,IAAMc,IAAI,GAAGd,CAAC,CAACwB,MAAM,CAACyC,KAAK,CAAC,CAAC,CAAC;MAC9BpD,SAAS,CAACC,IAAI,CAAC;IACnB,CAAE;IACFoD,MAAM,EAAC,aAAa;IAAAjB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACnB,CACA,CAAC,eACNnE,KAAA,CAAA4D,aAAA;IAAKgB,SAAS,EAAC,UAAU;IAAAd,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACrBnE,KAAA,CAAA4D,aAAA,CAACzD,QAAQ;IACLqB,IAAI,EAAEA,IAAK;IACXJ,OAAO,EAAEA,OAAQ;IACjB4D,YAAY,EAAE;MACdC,UAAU,EAAE;QACRC,eAAe,EAAE;UAAEC,IAAI,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAG;MAC7C;IACA,CAAE;IACFC,eAAe,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE;IAAAvB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAChC,CACA,CACA,CAAC;AAEd"},"metadata":{},"sourceType":"module"}