{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationModelSelector } from './gridPaginationSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getPageCount, noRowCountInServerMode, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from './gridPaginationUtils';\nexport var paginationStateInitializer = function paginationStateInitializer(state, props) {\n  var _props$paginationMode, _props$initialState, _props$initialState$p;\n  var paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_props$paginationMode = props.paginationModel) != null ? _props$paginationMode : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.paginationModel);\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);\n  return _extends({}, state, {\n    pagination: {\n      paginationModel: paginationModel\n    }\n  });\n};\nvar mergeStateWithPaginationModel = function mergeStateWithPaginationModel(rowCount, signature, paginationModelProp) {\n  return function (paginationState) {\n    var _paginationModelProp$;\n    var paginationModel = paginationState.paginationModel;\n    var pageSize = (_paginationModelProp$ = paginationModelProp == null ? void 0 : paginationModelProp.pageSize) != null ? _paginationModelProp$ : paginationModel.pageSize;\n    var pageCount = getPageCount(rowCount, pageSize);\n    if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {\n      paginationModel = paginationModelProp;\n    }\n    var validPage = getValidPage(paginationModel.page, pageCount);\n    if (validPage !== paginationModel.page) {\n      paginationModel = _extends({}, paginationModel, {\n        page: validPage\n      });\n    }\n    throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n    return {\n      paginationModel: paginationModel\n    };\n  };\n};\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport var useGridPagination = function useGridPagination(apiRef, props) {\n  var _props$initialState3, _props$initialState3$;\n  var logger = useGridLogger(apiRef, 'useGridPagination');\n  var visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  var densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  var rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'pagination',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  var setPage = React.useCallback(function (page) {\n    var currentModel = gridPaginationModelSelector(apiRef);\n    if (page === currentModel.page) {\n      return;\n    }\n    logger.debug(\"Setting page to \".concat(page));\n    apiRef.current.setPaginationModel({\n      page: page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  var setPageSize = React.useCallback(function (pageSize) {\n    var currentModel = gridPaginationModelSelector(apiRef);\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n    logger.debug(\"Setting page size to \".concat(pageSize));\n    apiRef.current.setPaginationModel({\n      pageSize: pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  var setPaginationModel = React.useCallback(function (paginationModel) {\n    var _props$rowCount;\n    var currentModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel === currentModel) {\n      return;\n    }\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount = props.rowCount) != null ? _props$rowCount : visibleTopLevelRowCount, props.signature, paginationModel), 'setPaginationModel');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.rowCount, props.signature, visibleTopLevelRowCount]);\n  var pageApi = {\n    setPage: setPage,\n    setPageSize: setPageSize,\n    setPaginationModel: setPaginationModel\n  };\n  useGridApiMethod(apiRef, pageApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  var stateExportPreProcessing = React.useCallback(function (prevState, context) {\n    var _props$initialState2, _props$initialState2$;\n    var paginationModel = gridPaginationModelSelector(apiRef);\n    var shouldExportPaginationModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `paginationModel` is controlled\n    props.paginationModel != null ||\n    // Always export if the `paginationModel` has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.paginationModel) != null ||\n    // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel: paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.pagination) == null ? void 0 : _props$initialState3$.paginationModel, props.autoPageSize]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto, _context$stateToResto2, _props$rowCount2;\n    var paginationModel = (_context$stateToResto = context.stateToRestore.pagination) != null && _context$stateToResto.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : visibleTopLevelRowCount, props.signature, paginationModel), 'stateRestorePreProcessing');\n    return params;\n  }, [apiRef, props.autoPageSize, props.rowCount, props.signature, visibleTopLevelRowCount]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  var handlePaginationModelChange = function handlePaginationModelChange() {\n    var _apiRef$current$virtu;\n    var paginationModel = gridPaginationModelSelector(apiRef);\n    if ((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n    apiRef.current.forceUpdate();\n  };\n  var handleUpdateAutoPageSize = React.useCallback(function () {\n    var dimensions = apiRef.current.getRootDimensions();\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n    var pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    var maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(function () {\n    var _props$rowCount3;\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount3 = props.rowCount) != null ? _props$rowCount3 : visibleTopLevelRowCount, props.signature, props.paginationModel));\n  }, [apiRef, props.paginationModel, props.rowCount, props.paginationMode, visibleTopLevelRowCount, props.signature]);\n  React.useEffect(function () {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};","map":null,"metadata":{},"sourceType":"module"}