{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nimport { unstable_resetCreateSelectorCache } from '../../utils/createSelector';\nvar isSyntheticEvent = function isSyntheticEvent(event) {\n  return event.isPropagationStopped !== undefined;\n};\nvar globalId = 0;\nvar wrapPublicApi = function wrapPublicApi(publicApi) {\n  var privateOnlyApi = {};\n  privateOnlyApi.getPublicApi = function () {\n    return publicApi;\n  };\n  privateOnlyApi.register = function (visibility, methods) {\n    Object.keys(methods).forEach(function (methodName) {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n  var handler = {\n    get: function get(obj, prop) {\n      if (prop in obj) {\n        return obj[prop];\n      }\n      return privateOnlyApi[prop];\n    },\n    set: function set(obj, prop, value) {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\nexport function useGridApiInitialization(inputApiRef, props) {\n  var publicApiRef = React.useRef();\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: globalId\n    };\n    globalId += 1;\n  }\n  var privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n  React.useImperativeHandle(inputApiRef, function () {\n    return publicApiRef.current;\n  }, [publicApiRef]);\n  var publishEvent = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var name = args[0],\n      params = args[1],\n      _args$ = args[2],\n      event = _args$ === void 0 ? {} : _args$;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    var details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  var subscribeEvent = React.useCallback(function (event, handler, options) {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    var api = privateApiRef.current;\n    return function () {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent: subscribeEvent,\n    publishEvent: publishEvent\n  }, 'public');\n  React.useEffect(function () {\n    var api = privateApiRef.current;\n    return function () {\n      unstable_resetCreateSelectorCache(api.instanceId);\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}","map":null,"metadata":{},"sourceType":"module"}