{"ast":null,"code":"var _jsxFileName = \"E:\\\\School Web Application\\\\FrontEnd\\\\src\\\\Routes\\\\Admin\\\\GroupResult.js\";\nimport React from 'react';\nexport default function GroupResult() {\n  var readExcel = function readExcel(file) {\n    /*\r\n    const promise = new Promise((resolve, reject)=>{\r\n        const fileReader = new FileReader(file);\r\n        fileReader.readAsArrayBuffer(file)\r\n          fileReader.onload = (e)=>{\r\n            const bufferArray = e.target.result;\r\n              const wb = XLSX.read(bufferArray,{type:'buffer'});\r\n              const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            resolve(data);\r\n        };\r\n        fileReader.onerror = ((error)=>{\r\n            reject(error);\r\n        })\r\n    })\r\n      promise.then((data)=>{\r\n        \r\n        // For columns\r\n        const columnNames = Object.keys(data[0])\r\n        let columns = [{\r\n            field: \"action\",\r\n            headerName: \"Action\",\r\n            sortable: false,\r\n            renderCell: ({ row }) =>\r\n            <button className='action-btn' onClick={()=>{return createAccount(row)}}><i className=\"fa-solid fa-user-plus\"></i>Create</button>,\r\n            width: 150\r\n        }];\r\n        \r\n        columnNames.forEach((value) => {\r\n            columns.push({\r\n                field: value, \r\n                headerName: value, \r\n                width: 100,\r\n                sortable: false \r\n            })\r\n        });\r\n        setColumns(columns);\r\n          let rows = [];\r\n          data.forEach((value,index) => {\r\n            rows.push({\r\n                create : 'Create',\r\n                id: ++index,\r\n                ...value\r\n            });\r\n        });\r\n        setRows(rows);\r\n        \r\n    })\r\n    */\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"innerHero\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formPart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"excelLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Upload An Excel File\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"custom-file-input\",\n    type: \"file\",\n    onChange: function onChange(e) {\n      var file = e.target.files[0];\n      readExcel(file);\n    },\n    accept: \".xlsx, .xls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"names":["React","GroupResult","readExcel","file","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","accept"],"sources":["E:/School Web Application/FrontEnd/src/Routes/Admin/GroupResult.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function GroupResult() {\r\n\r\n    const readExcel = (file)=>{\r\n        /*\r\n        const promise = new Promise((resolve, reject)=>{\r\n            const fileReader = new FileReader(file);\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload = (e)=>{\r\n                const bufferArray = e.target.result;\r\n\r\n                const wb = XLSX.read(bufferArray,{type:'buffer'});\r\n\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                const data = XLSX.utils.sheet_to_json(ws);\r\n                resolve(data);\r\n            };\r\n            fileReader.onerror = ((error)=>{\r\n                reject(error);\r\n            })\r\n        })\r\n\r\n        promise.then((data)=>{\r\n            \r\n            // For columns\r\n            const columnNames = Object.keys(data[0])\r\n            let columns = [{\r\n                field: \"action\",\r\n                headerName: \"Action\",\r\n                sortable: false,\r\n                renderCell: ({ row }) =>\r\n                <button className='action-btn' onClick={()=>{return createAccount(row)}}><i className=\"fa-solid fa-user-plus\"></i>Create</button>,\r\n                width: 150\r\n            }];\r\n            \r\n            columnNames.forEach((value) => {\r\n                columns.push({\r\n                    field: value, \r\n                    headerName: value, \r\n                    width: 100,\r\n                    sortable: false \r\n                })\r\n            });\r\n            setColumns(columns);\r\n\r\n            let rows = [];\r\n\r\n            data.forEach((value,index) => {\r\n                rows.push({\r\n                    create : 'Create',\r\n                    id: ++index,\r\n                    ...value\r\n                });\r\n            });\r\n            setRows(rows);\r\n            \r\n        })\r\n        */\r\n    }\r\n\r\n    return (\r\n        <div className='innerHero'>\r\n        <div className='formPart'>\r\n            <label className='excelLabel'>Upload An Excel File</label>\r\n                <input \r\n                className='custom-file-input'\r\n                type=\"file\" \r\n                onChange={(e)=>{\r\n                    const file = e.target.files[0];\r\n                    readExcel(file);\r\n                }}\r\n                accept='.xlsx, .xls'\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,WAAWA,CAAA,EAAG;EAElC,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,IAAI,EAAG;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAjDQ,CAwDH;EAED,oBACIH,KAAA,CAAAI,aAAA;IAAKC,SAAS,EAAC,WAAW;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BX,KAAA,CAAAI,aAAA;IAAKC,SAAS,EAAC,UAAU;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACrBX,KAAA,CAAAI,aAAA;IAAOC,SAAS,EAAC,YAAY;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,sBAA2B,CAAC,eACtDX,KAAA,CAAAI,aAAA;IACAC,SAAS,EAAC,mBAAmB;IAC7BO,IAAI,EAAC,MAAM;IACXC,QAAQ,EAAE,SAAAA,SAACC,CAAC,EAAG;MACX,IAAMX,IAAI,GAAGW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC9Bd,SAAS,CAACC,IAAI,CAAC;IACnB,CAAE;IACFc,MAAM,EAAC,aAAa;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACnB,CACA,CACJ,CAAC;AAEd"},"metadata":{},"sourceType":"module"}