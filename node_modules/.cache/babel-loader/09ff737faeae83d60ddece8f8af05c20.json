{"ast":null,"code":"import { createSelector as reselectCreateSelector } from 'reselect';\nimport { buildWarning } from './warning';\nvar cacheContainer = {\n  cache: new WeakMap()\n};\nvar missingInstanceIdWarning = buildWarning(['MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.', 'To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`.']);\nfunction checkIsAPIRef(value) {\n  return 'current' in value && 'instanceId' in value.current;\n}\nvar DEFAULT_INSTANCE_ID = {\n  id: 'default'\n};\nexport var createSelector = function createSelector(a, b, c, d, e, f) {\n  if ((arguments.length <= 6 ? 0 : arguments.length - 6) > 0) {\n    throw new Error('Unsupported number of selectors');\n  }\n  var selector;\n  if (a && b && c && d && e && f) {\n    selector = function selector(stateOrApiRef, instanceIdParam) {\n      var isAPIRef = checkIsAPIRef(stateOrApiRef);\n      var instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;\n      var state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;\n      var va = a(state, instanceId);\n      var vb = b(state, instanceId);\n      var vc = c(state, instanceId);\n      var vd = d(state, instanceId);\n      var ve = e(state, instanceId);\n      return f(va, vb, vc, vd, ve);\n    };\n  } else if (a && b && c && d && e) {\n    selector = function selector(stateOrApiRef, instanceIdParam) {\n      var isAPIRef = checkIsAPIRef(stateOrApiRef);\n      var instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;\n      var state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;\n      var va = a(state, instanceId);\n      var vb = b(state, instanceId);\n      var vc = c(state, instanceId);\n      var vd = d(state, instanceId);\n      return e(va, vb, vc, vd);\n    };\n  } else if (a && b && c && d) {\n    selector = function selector(stateOrApiRef, instanceIdParam) {\n      var isAPIRef = checkIsAPIRef(stateOrApiRef);\n      var instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;\n      var state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;\n      var va = a(state, instanceId);\n      var vb = b(state, instanceId);\n      var vc = c(state, instanceId);\n      return d(va, vb, vc);\n    };\n  } else if (a && b && c) {\n    selector = function selector(stateOrApiRef, instanceIdParam) {\n      var isAPIRef = checkIsAPIRef(stateOrApiRef);\n      var instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;\n      var state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;\n      var va = a(state, instanceId);\n      var vb = b(state, instanceId);\n      return c(va, vb);\n    };\n  } else if (a && b) {\n    selector = function selector(stateOrApiRef, instanceIdParam) {\n      var isAPIRef = checkIsAPIRef(stateOrApiRef);\n      var instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;\n      var state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;\n      var va = a(state, instanceId);\n      return b(va);\n    };\n  } else {\n    throw new Error('Missing arguments');\n  }\n\n  // We use this property to detect if the selector was created with createSelector\n  // or it's only a simple function the receives the state and returns part of it.\n  selector.acceptsApiRef = true;\n  return selector;\n};\nexport var createSelectorMemoized = function createSelectorMemoized() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var selector = function selector() {\n    var _cache$get, _cache$get3;\n    for (var _len2 = arguments.length, selectorArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      selectorArgs[_key2] = arguments[_key2];\n    }\n    var stateOrApiRef = selectorArgs[0],\n      instanceId = selectorArgs[1];\n    var isAPIRef = checkIsAPIRef(stateOrApiRef);\n    var cacheKey = isAPIRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : DEFAULT_INSTANCE_ID;\n    var state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;\n    if (process.env.NODE_ENV !== 'production') {\n      if (cacheKey.id === 'default') {\n        missingInstanceIdWarning();\n      }\n    }\n    var cache = cacheContainer.cache;\n    if (cache.get(cacheKey) && (_cache$get = cache.get(cacheKey)) != null && _cache$get.get(args)) {\n      var _cache$get2;\n      // We pass the cache key because the called selector might have as\n      // dependency another selector created with this `createSelector`.\n      return (_cache$get2 = cache.get(cacheKey)) == null ? void 0 : _cache$get2.get(args)(state, cacheKey);\n    }\n    var newSelector = reselectCreateSelector.apply(void 0, args);\n    if (!cache.get(cacheKey)) {\n      cache.set(cacheKey, new Map());\n    }\n    (_cache$get3 = cache.get(cacheKey)) == null ? void 0 : _cache$get3.set(args, newSelector);\n    return newSelector(state, cacheKey);\n  };\n\n  // We use this property to detect if the selector was created with createSelector\n  // or it's only a simple function the receives the state and returns part of it.\n  selector.acceptsApiRef = true;\n  return selector;\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport var unstable_resetCreateSelectorCache = function unstable_resetCreateSelectorCache() {\n  cacheContainer.cache = new WeakMap();\n};","map":null,"metadata":{},"sourceType":"module"}