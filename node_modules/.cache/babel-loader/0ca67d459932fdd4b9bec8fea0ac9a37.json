{"ast":null,"code":"import _objectSpread from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\School Web Application\\\\FrontEnd\\\\src\\\\Routes\\\\Admin\\\\GroupResult.js\";\nimport React from 'react';\nexport default function GroupResult() {\n  var _this = this;\n  var readExcel = function readExcel(file) {\n    var promise = new Promise(function (resolve, reject) {\n      var fileReader = new FileReader(file);\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = function (e) {\n        var bufferArray = e.target.result;\n        var wb = XLSX.read(bufferArray, {\n          type: 'buffer'\n        });\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n        var data = XLSX.utils.sheet_to_json(ws);\n        resolve(data);\n      };\n      fileReader.onerror = function (error) {\n        reject(error);\n      };\n    });\n    promise.then(function (data) {\n      // For columns\n      var columnNames = Object.keys(data[0]);\n      var columns = [{\n        field: \"action\",\n        headerName: \"Action\",\n        sortable: false,\n        renderCell: function renderCell(_ref) {\n          var row = _ref.row;\n          return /*#__PURE__*/React.createElement(\"button\", {\n            className: \"action-btn\",\n            onClick: function onClick() {\n              return createAccount(row);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"i\", {\n            className: \"fa-solid fa-user-plus\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 90\n            }\n          }), \"Create\");\n        },\n        width: 150\n      }];\n      columnNames.forEach(function (value) {\n        columns.push({\n          field: value,\n          headerName: value,\n          width: 100,\n          sortable: false\n        });\n      });\n      setColumns(columns);\n      var rows = [];\n      data.forEach(function (value, index) {\n        rows.push(_objectSpread({\n          create: 'Create',\n          id: ++index\n        }, value));\n      });\n      setRows(rows);\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"innerHero\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formPart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"excelLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Upload An Excel File\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"custom-file-input\",\n    type: \"file\",\n    onChange: function onChange(e) {\n      var file = e.target.files[0];\n      readExcel(file);\n    },\n    accept: \".xlsx, .xls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"names":["React","GroupResult","_this","readExcel","file","promise","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","XLSX","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","onerror","error","then","columnNames","Object","keys","columns","field","headerName","sortable","renderCell","_ref","row","createElement","className","onClick","createAccount","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","forEach","value","push","setColumns","rows","index","_objectSpread","create","id","setRows","onChange","files","accept"],"sources":["E:/School Web Application/FrontEnd/src/Routes/Admin/GroupResult.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function GroupResult() {\r\n\r\n    const readExcel = (file)=>{\r\n        \r\n        const promise = new Promise((resolve, reject)=>{\r\n            const fileReader = new FileReader(file);\r\n            fileReader.readAsArrayBuffer(file)\r\n\r\n            fileReader.onload = (e)=>{\r\n                const bufferArray = e.target.result;\r\n\r\n                const wb = XLSX.read(bufferArray,{type:'buffer'});\r\n\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n                const data = XLSX.utils.sheet_to_json(ws);\r\n                resolve(data);\r\n            };\r\n            fileReader.onerror = ((error)=>{\r\n                reject(error);\r\n            })\r\n        })\r\n\r\n        promise.then((data)=>{\r\n            \r\n            // For columns\r\n            const columnNames = Object.keys(data[0])\r\n            let columns = [{\r\n                field: \"action\",\r\n                headerName: \"Action\",\r\n                sortable: false,\r\n                renderCell: ({ row }) =>\r\n                <button className='action-btn' onClick={()=>{return createAccount(row)}}><i className=\"fa-solid fa-user-plus\"></i>Create</button>,\r\n                width: 150\r\n            }];\r\n            \r\n            columnNames.forEach((value) => {\r\n                columns.push({\r\n                    field: value, \r\n                    headerName: value, \r\n                    width: 100,\r\n                    sortable: false \r\n                })\r\n            });\r\n            setColumns(columns);\r\n\r\n            let rows = [];\r\n\r\n            data.forEach((value,index) => {\r\n                rows.push({\r\n                    create : 'Create',\r\n                    id: ++index,\r\n                    ...value\r\n                });\r\n            });\r\n            setRows(rows);\r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='innerHero'>\r\n        <div className='formPart'>\r\n            <label className='excelLabel'>Upload An Excel File</label>\r\n                <input \r\n                className='custom-file-input'\r\n                type=\"file\" \r\n                onChange={(e)=>{\r\n                    const file = e.target.files[0];\r\n                    readExcel(file);\r\n                }}\r\n                accept='.xlsx, .xls'\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}