{"ast":null,"code":"import _defineProperty from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport TablePagination, { tablePaginationClasses } from '@mui/material/TablePagination';\nimport { styled } from '@mui/material/styles';\nimport { useGridSelector } from '../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { gridFilteredTopLevelRowCountSelector } from '../hooks/features/filter';\nimport { gridPaginationModelSelector } from '../hooks/features/pagination/gridPaginationSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar GridPaginationRoot = styled(TablePagination)(function (_ref2) {\n  var _ref3;\n  var theme = _ref2.theme;\n  return _ref3 = {}, _defineProperty(_ref3, \"& .\".concat(tablePaginationClasses.selectLabel), _defineProperty({\n    display: 'none'\n  }, theme.breakpoints.up('sm'), {\n    display: 'block'\n  })), _defineProperty(_ref3, \"& .\".concat(tablePaginationClasses.input), _defineProperty({\n    display: 'none'\n  }, theme.breakpoints.up('sm'), {\n    display: 'inline-flex'\n  })), _ref3;\n});\nexport var GridPagination = /*#__PURE__*/React.forwardRef(function GridPagination(props, ref) {\n  var _rootProps$pageSizeOp;\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  var visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  var rowCount = React.useMemo(function () {\n    var _ref, _rootProps$rowCount;\n    return (_ref = (_rootProps$rowCount = rootProps.rowCount) != null ? _rootProps$rowCount : visibleTopLevelRowCount) != null ? _ref : 0;\n  }, [rootProps.rowCount, visibleTopLevelRowCount]);\n  var lastPage = React.useMemo(function () {\n    return Math.floor(rowCount / (paginationModel.pageSize || 1));\n  }, [rowCount, paginationModel.pageSize]);\n  var handlePageSizeChange = React.useCallback(function (event) {\n    var pageSize = Number(event.target.value);\n    apiRef.current.setPageSize(pageSize);\n  }, [apiRef]);\n  var handlePageChange = React.useCallback(function (_, page) {\n    apiRef.current.setPage(page);\n  }, [apiRef]);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var warnedOnceMissingInPageSizeOptions = React.useRef(false);\n    if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !rootProps.pageSizeOptions.includes(paginationModel.pageSize)) {\n      console.warn([\"MUI: The page size `\".concat(paginationModel.pageSize, \"` is not preset in the `pageSizeOptions`\"), \"Add it to show the pagination select.\"].join('\\n'));\n      warnedOnceMissingInPageSizeOptions.current = true;\n    }\n  }\n  return /*#__PURE__*/_jsx(GridPaginationRoot, _extends({\n    ref: ref,\n    component: \"div\",\n    count: rowCount,\n    page: paginationModel.page <= lastPage ? paginationModel.page : lastPage,\n    rowsPerPageOptions: (_rootProps$pageSizeOp = rootProps.pageSizeOptions) != null && _rootProps$pageSizeOp.includes(paginationModel.pageSize) ? rootProps.pageSizeOptions : [],\n    rowsPerPage: paginationModel.pageSize,\n    onPageChange: handlePageChange,\n    onRowsPerPageChange: handlePageSizeChange\n  }, apiRef.current.getLocaleText('MuiTablePagination'), props));\n});","map":null,"metadata":{},"sourceType":"module"}