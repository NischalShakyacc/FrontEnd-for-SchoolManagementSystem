{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\n/**\n * Get the columns state\n * @category Columns\n */\nexport var gridColumnsStateSelector = function gridColumnsStateSelector(state) {\n  return state.columns;\n};\n\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport var gridColumnFieldsSelector = createSelector(gridColumnsStateSelector, function (columnsState) {\n  return columnsState.orderedFields;\n});\n\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport var gridColumnLookupSelector = createSelector(gridColumnsStateSelector, function (columnsState) {\n  return columnsState.lookup;\n});\n\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport var gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, function (allFields, lookup) {\n  return allFields.map(function (field) {\n    return lookup[field];\n  });\n});\n\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport var gridColumnVisibilityModelSelector = createSelector(gridColumnsStateSelector, function (columnsState) {\n  return columnsState.columnVisibilityModel;\n});\n\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport var gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, function (columns, columnVisibilityModel) {\n  return columns.filter(function (column) {\n    return columnVisibilityModel[column.field] !== false;\n  });\n});\n\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport var gridVisibleColumnFieldsSelector = createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  return visibleColumns.map(function (column) {\n    return column.field;\n  });\n});\n\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport var gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, function (visibleColumns) {\n  var positions = [];\n  var currentPosition = 0;\n  for (var i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport var gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, function (visibleColumns, positions) {\n  var colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport var gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, function (columns) {\n  return columns.filter(function (col) {\n    return col.filterable;\n  });\n});\n\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport var gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, function (columns) {\n  return columns.reduce(function (acc, col) {\n    if (col.filterable) {\n      acc[col.field] = col;\n    }\n    return acc;\n  }, {});\n});","map":null,"metadata":{},"sourceType":"module"}