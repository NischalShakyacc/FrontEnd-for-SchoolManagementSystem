{"ast":null,"code":"import _slicedToArray from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"E:\\\\School Web Application\\\\FrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"getOptionLabel\", \"getOptionValue\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { getValueFromValueOptions, isSingleSelectColDef } from './filterPanelUtils';\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar renderSingleSelectOptions = function renderSingleSelectOptions(_ref) {\n  var _ref$column = _ref.column,\n    valueOptions = _ref$column.valueOptions,\n    field = _ref$column.field,\n    OptionComponent = _ref.OptionComponent,\n    getOptionLabel = _ref.getOptionLabel,\n    getOptionValue = _ref.getOptionValue,\n    isSelectNative = _ref.isSelectNative,\n    baseSelectOptionProps = _ref.baseSelectOptionProps;\n  var iterableColumnValues = typeof valueOptions === 'function' ? [''].concat(_toConsumableArray(valueOptions({\n    field: field\n  }))) : [''].concat(_toConsumableArray(valueOptions || []));\n  return iterableColumnValues.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return /*#__PURE__*/_createElement(OptionComponent, _extends({}, baseSelectOptionProps, {\n      native: isSelectNative,\n      key: value,\n      value: value\n    }), label);\n  });\n};\nfunction GridFilterInputSingleSelect(props) {\n  var _item$value, _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2, _resolvedColumn, _resolvedColumn2, _rootProps$slotProps3, _rootProps$slotProps4;\n  var item = props.item,\n    applyValue = props.applyValue,\n    type = props.type,\n    apiRef = props.apiRef,\n    focusElementRef = props.focusElementRef,\n    getOptionLabelProp = props.getOptionLabel,\n    getOptionValueProp = props.getOptionValue,\n    others = _objectWithoutPropertiesLoose(props, _excluded);\n  var _React$useState = React.useState((_item$value = item.value) != null ? _item$value : ''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    filterValueState = _React$useState2[0],\n    setFilterValueState = _React$useState2[1];\n  var id = useId();\n  var rootProps = useGridRootProps();\n  var baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};\n  var isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;\n  var baseSelectOptionProps = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelectOption) || {};\n  var resolvedColumn = null;\n  if (item.field) {\n    var column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  var getOptionValue = getOptionValueProp || ((_resolvedColumn = resolvedColumn) == null ? void 0 : _resolvedColumn.getOptionValue);\n  var getOptionLabel = getOptionLabelProp || ((_resolvedColumn2 = resolvedColumn) == null ? void 0 : _resolvedColumn2.getOptionLabel);\n  var currentValueOptions = React.useMemo(function () {\n    if (!resolvedColumn) {\n      return undefined;\n    }\n    return typeof resolvedColumn.valueOptions === 'function' ? resolvedColumn.valueOptions({\n      field: resolvedColumn.field\n    }) : resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  var onFilterChange = React.useCallback(function (event) {\n    var value = event.target.value;\n\n    // NativeSelect casts the value to a string.\n    value = getValueFromValueOptions(value, currentValueOptions, getOptionValue);\n    setFilterValueState(String(value));\n    applyValue(_extends({}, item, {\n      value: value\n    }));\n  }, [currentValueOptions, getOptionValue, applyValue, item]);\n  React.useEffect(function () {\n    var _itemValue;\n    var itemValue;\n    if (currentValueOptions !== undefined) {\n      // sanitize if valueOptions are provided\n      itemValue = getValueFromValueOptions(item.value, currentValueOptions, getOptionValue);\n      if (itemValue !== item.value) {\n        applyValue(_extends({}, item, {\n          value: itemValue\n        }));\n        return;\n      }\n    } else {\n      itemValue = item.value;\n    }\n    itemValue = (_itemValue = itemValue) != null ? _itemValue : '';\n    setFilterValueState(String(itemValue));\n  }, [item, currentValueOptions, applyValue, getOptionValue]);\n  if (!isSingleSelectColDef(resolvedColumn)) {\n    return null;\n  }\n  if (!isSingleSelectColDef(resolvedColumn)) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(rootProps.slots.baseTextField, _extends({\n    // TODO: use baseSelect slot\n    id: id,\n    label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n    value: filterValueState,\n    onChange: onFilterChange,\n    variant: \"standard\",\n    type: type || 'text',\n    InputLabelProps: {\n      shrink: true\n    },\n    inputRef: focusElementRef,\n    select: true,\n    SelectProps: _extends({\n      native: isSelectNative\n    }, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelect)\n  }, others, (_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseTextField, {\n    children: renderSingleSelectOptions({\n      column: resolvedColumn,\n      OptionComponent: rootProps.slots.baseSelectOption,\n      getOptionLabel: getOptionLabel,\n      getOptionValue: getOptionValue,\n      isSelectNative: isSelectNative,\n      baseSelectOptionProps: baseSelectOptionProps\n    })\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * Used to determine the label displayed for a given value option.\n   * @param {ValueOptions} value The current value option.\n   * @returns {string} The text to be displayed.\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * Used to determine the value used for a value option.\n   * @param {ValueOptions} value The current value option.\n   * @returns {string} The value to be used.\n   */\n  getOptionValue: PropTypes.func,\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired\n} : void 0;\nexport { GridFilterInputSingleSelect };","map":null,"metadata":{},"sourceType":"module"}